.define public irq_did_latch 0
.define public irq_delaying 1

.program leds_px_pusher
.side_set 1 opt
public entry_point:
.wrap_target
  ; get 32 bits from fifo (not required with autopull, useful for debug)
  ; pull
  ; push 24 bits to the shift registers
  ; also, return latch bit to 0
  set x, 23      side 0
loop:
  ; TODO: check if delays can be lowered with a PCB
  ; set bit; lower clock edge
  out pins, 1    side 0 [1]
  ; loop; latch bit (rising edge)
  jmp x-- loop   side 1 [2]
end:
  ; ignore unused bits
  ; load MSBs into x
  ; lower clock edge
  out x, 8    side 0
  ; MSB=1 indicates end of row
  jmp x-- end_of_row
  .wrap
end_of_row:
  ; wait until previous row's delay is complete
  wait 0 irq irq_delaying
  ; signal that row is processed
  irq set irq_did_latch
  ; clock RCLK (latch onto register output stage)
  set pins, 1 [3]
  set pins, 0
  ; wait for next row
  jmp entry_point

.program leds_delay
.side_set 1 opt
.define public output_on 0
.define public output_off 1
public entry_point:
  ; begin only after data is latched
  wait 1 irq irq_did_latch
  ; signal that delay is ongoing
  irq set irq_delaying
  ; x = number of cycles to delay
  out x, 32
loop:
  ; busy loop for x cycles
  ; enable output
  jmp x-- loop                  side output_on
end:
  ; signal that delay is complete
  ; disable output
  irq clear irq_delaying        side output_off
