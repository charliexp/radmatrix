.define public irq_did_latch 0
.define public irq_delaying 1
.define public irq_row_selected 1

; TODO: check if delays can be lowered with a PCB
.define public srclk_0_delay 1
.define public srclk_1_delay 2
.define public rclk_1_delay 3

.program leds_px_pusher
.side_set 1 opt
entry_point:
.wrap_target
  ; get 32 bits from fifo (not required with autopull, useful for debug)
  ; pull
  ; push 24 bits to the shift registers
  ; also, return latch bit to 0
  set x, 23                     side 0
loop:
  ; set bit; lower clock edge
  out pins, 1                   side 0  [srclk_0_delay]
  ; loop; latch bit (rising edge)
  jmp x-- loop                  side 1  [srclk_1_delay]
end:
  ; ignore unused bits
  ; load MSBs into x
  ; lower clock edge
  out x, 8                      side 0
  ; MSB=1 indicates end of row
  jmp !x entry_point
end_of_row:
  ; wait until previous row's delay is complete
  ; (irq will be 0 on first row by default)
  wait 0 irq irq_delaying
  ; wait until row is selected, and clear flag
  wait 1 irq irq_row_selected
  ; signal that we're about to latch the row onto display
  irq set irq_did_latch
  ; clock RCLK (latch onto register output stage)
  set pins, 1                           [rclk_1_delay]
  set pins, 0
  ; wait for next row
  .wrap

.program leds_row_selector
.side_set 1 opt
entry_point:
.wrap_target
  ; LSB=1 indicates first (bottom) row, ergo, high SER for the first pulse
  out pins, 1                   side 0  [srclk_0_delay]
  ; The rest of the word indicates number of SRCLK pulses
  out x, 31
loop:
  ; pulse SRCLK x times
  ; set SER=0 after first pulse
  nop                           side 1  [srclk_1_delay]
  set pins, 0                   side 0  [srclk_0_delay]
  jmp x-- loop
end:
  ; signal that row is selected and wait until acknowledged
  ; some delay so that in the worst case scenario we don't start changing rows before RCLK latch
  irq wait irq_row_selected             [4]
  .wrap

.program leds_delay
.side_set 1 opt
.define public output_on 0
.define public output_off 1
entry_point:
.wrap_target
  ; begin only after data is latched
  wait 1 irq irq_did_latch
  ; signal that delay is ongoing
  irq set irq_delaying
  ; x = number of cycles to delay
  out x, 32
loop:
  ; busy loop for x cycles
  ; enable output
  jmp x-- loop                  side output_on
end:
  ; signal that delay is complete
  ; disable output
  irq clear irq_delaying        side output_off
  .wrap
